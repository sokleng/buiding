<?php

namespace CondoBundle\Repository;

use CondoBundle\Entity\Condominium;
use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use WeBridge\UserBundle\Entity\User;
use DateTime;

/**
 * FeedbackRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedbackRepository extends EntityRepository
{
    /**
     * Get all unread feedbacks by condominium.
     *
     * @param Condominium $condominium
     *
     * @return QueryBuilder
     */
    public function findAllUnreadByCondominium(Condominium $condominium)
    {
        return $this->createQueryBuilder('feedback')
            ->where('feedback.condominium = :condominium')
            ->andWhere('feedback.read = :read')
            ->setParameter('condominium', $condominium)
            ->setParameter('read', false)
            ->orderBy('feedback.creationDate', 'DESC');
    }

    /**
     * Get all feedbacks short by unread and newest by condominium.
     *
     * @param Condominium $condominium
     *
     * @return QueryBuilder
     */
    public function findAllByCondominium(Condominium $condominium)
    {
        return $this->createQueryBuilder('feedback')
            ->where('feedback.condominium = :condominium')
            ->setParameter('condominium', $condominium)
            ->addOrderBy('feedback.read', 'ASC')
            ->addOrderBy('feedback.creationDate', 'DESC');
    }

    /**
     * Get all feedbacks specific condominium.
     *
     * @param Condominium $condominium
     *
     * @return QueryBuilder
     */
    public function findAllFeedbackCondominium(Condominium $condominium)
    {
        return $this->createQueryBuilder('feedback')
            ->where('feedback.condominium = :condominium')
            ->setParameter('condominium', $condominium)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get last feedbacks of a user in a specific condominium.
     *
     * @param Condominium $condominium
     * @param User        $user
     *
     * @return QueryBuilder
     */
    public function findLastFeedBackOfUserInCondominium(
        Condominium $condominium,
        User $user
    ) {
        return $this->createQueryBuilder('feedback')
            ->where('feedback.condominium = :condominium')
            ->setParameter('condominium', $condominium)
            ->andWhere('feedback.user = :user')
            ->setParameter('user', $user)
            ->orderBy('feedback.creationDate', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * Get all feedbacks specific condominium and date.
     *
     * @param Condominium $condominium
     * @param DateTime    $from
     * @param DateTime    $to
     *
     * @return QueryBuilder
     */
    public function findAllFeedbackCondominiumAndDate(
        Condominium $condominium,
        DateTime $from,
        DateTime $to
    ) {
        return $this->createQueryBuilder('feedback')
            ->where('feedback.condominium = :condominium')
            ->andWhere('feedback.creationDate >= :from AND feedback.creationDate <= :to')
            ->setParameter('condominium', $condominium)
            ->setParameter('from', $from)
            ->setParameter('to', $to);
    }
}
