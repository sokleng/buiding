<?php

namespace CondoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CondoBundle\Entity\Condominium;
use CondoBundle\Entity\UnitType;
use CondoBundle\Entity\Unit;
use DateTime;

/**
 * UnitRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UnitRepository extends EntityRepository
{
    /**
     * Gets all units for a given condominium.
     *
     * @param Condominium $condo
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllUnitsForCondominium(Condominium $condo)
    {
        $qb = $this->createQueryBuilder('unit')
            ->join('unit.condominium', 'condo')
            ->where('condo = :condo')
            ->setParameter('condo', $condo);

        return $qb;
    }

    /**
     * Gets all units for a given condominium.
     *
     * @param Condominium $condo
     * @param Unit|null   $unit
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAvaliableUnitsForCondominium(Condominium $condo, $unit)
    {
        $clientUnit = $this
            ->getEntityManager()
            ->getRepository('CondoBundle:clientUnit')
            ->getUnitNotNullFromClient();

        $qb = $this->createQueryBuilder('unit');
        $qb->join('unit.condominium', 'condo')
            ->where('condo = :condo')
            ->andWhere(
                $qb
                ->expr()
                ->notIn(
                    'unit.id',
                    $clientUnit->getDQL()
                )
            )
            ->orWhere('unit = :unit')
            ->setParameter('condo', $condo)
            ->setParameter('unit', $unit)
            ->setParameter('now', new Datetime());

        return $qb;
    }

    /**
     * Gets all units for a given condominium.
     *
     * @param Condominium $condo
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findUnitsForCondo(Condominium $condo)
    {
        return $this->createQueryBuilder('unit')
            ->join('unit.condominium', 'condo')
            ->where('condo = :condo')
            ->setParameter('condo', $condo);
    }

    /**
     * Count unit for a given condominium.
     *
     * @param Condominium $condo
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function countAllUnitsForCondominium(Condominium $condo)
    {
        return $this->createQueryBuilder('unit')
            ->select('count(unit.id)')
            ->join('unit.condominium', 'condo')
            ->where('condo = :condo')
            ->setParameter('condo', $condo);
    }

     /* Gets unit for a given unit type.
     *
     * @param UnitType $unitType
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllUnitForUnitType(UnitType $unitType)
    {
        return $this->createQueryBuilder('unit')
            ->join('unit.type', 'type')
            ->where('type = :type')
            ->setParameter('type', $unitType);
    }
}
