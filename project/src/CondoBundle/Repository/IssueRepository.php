<?php

namespace CondoBundle\Repository;

use CondoBundle\Constant\IssueStatus;
use CondoBundle\Entity\Condominium;
use CondoBundle\Entity\Unit;
use CondoBundle\Entity\Supplier;
use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use WeBridge\UserBundle\Entity\User;
use DateTime;

/**
 * IssueRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IssueRepository extends EntityRepository
{
    const CLOSED = 3;

    /**
     * Gets a count of issue count per status.
     * The result is indexed by status.
     *
     * @param User $user
     * @param Unit $unit
     *
     * @return array
     */
    public function findCountByStatusForUserAndUnit(User $user, Unit $unit)
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->from('CondoBundle:Issue', 'issue', 'issue.status')
            ->select('issue.status as status')
            ->addSelect('COUNT(issue.status) as issue_count')
            ->where('issue.user = :user')
            ->andWhere('issue.unit = :unit')
            ->setParameter('user', $user)
            ->setParameter('unit', $unit)
            ->groupBy('issue.status')
            ->getQuery()
            ->getArrayResult()
        ;

        // Ensures all status are present, defaulting to 0 if not found.
        foreach (IssueStatus::getStatuses() as $key => $array) {
            if (!isset($result[$key])) {
                $result[$key] = [
                    'status' => $key,
                    'issue_count' => 0,
                ];
            }
        }

        return $result;
    }

    /**
     * Gets a count of issue count per status.
     * The result is indexed by status.
     *
     * @param Condominium $condominium
     *
     * @return array
     */
    public function findCountByStatusForCondominium(Condominium $condominium)
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->from('CondoBundle:Issue', 'issue', 'issue.status')
            ->select('issue.status as status')
            ->addSelect('COUNT(issue.status) as issueCount')
            ->join('issue.unit', 'unit')
            ->where('unit.condominium = :condo')
            ->setParameter('condo', $condominium)
            ->groupBy('issue.status')
            ->getQuery()
            ->getArrayResult()
        ;

        // Ensures all status are present, defaulting to 0 if not found.
        foreach (IssueStatus::getStatuses() as $key => $array) {
            if (!isset($result[$key])) {
                $result[$key] = [
                    'status' => $key,
                    'issueCount' => 0,
                ];
            }
        }

        return $result;
    }

    /**
     * Gets all issues that are considered open for a given condominium.
     *
     * @param Condominium $condominium
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findAllOpenedForCondominium(Condominium $condominium)
    {
        return $this->createQueryBuilder('issue')
            ->join('issue.unit', 'unit')
            ->where('unit.condominium = :condo')
            ->andWhere('issue.status IN (:openStatuses)')
            ->setParameter('condo', $condominium)
            ->setParameter('openStatuses', IssueStatus::getOpenStatuses())
            ->orderBy('issue.creationDate', 'DESC')
        ;
    }

    /**
     * Get all issues by unit.
     *
     * @param Unit $unit
     *
     * @return QueryBuilder
     */
    public function findByUnit(Unit $unit)
    {
        return $this->createQueryBuilder('issue')
            ->where('issue.unit = :unit')
            ->setParameter('unit', $unit)
            ->orderBy('issue.status', 'ASC')
            ->addOrderBy('issue.creationDate', 'DESC');
    }

    /**
     * Get all unread issues by condominium.
     *
     * @param Condominium $condominium
     *
     * @return QueryBuilder
     */
    public function findAllIssueCondominium(Condominium $condominium)
    {
        return $this->createQueryBuilder('issue')
            ->join('issue.unit', 'unit')
            ->where('unit.condominium = :condo')
            ->setParameter('condo', $condominium)
            ->orderBy('issue.creationDate', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Gets last three issues of a user that not yet closed.
     *
     * @param Condominium $condominium
     * @param User        $user
     *
     * @return array
     */
    public function findLastThreeIssuesOfUserThatNotYetResolved(
        Condominium $condominium,
        User $user
    ) {
        return $this->createQueryBuilder('issue')
            ->join('issue.unit', 'unit')
            ->where('unit.condominium = :condo')
            ->andWhere('issue.user = :user')
            ->andWhere('issue.status IN (:openStatuses)')
            ->orderBy('issue.creationDate', 'DESC')
            ->setMaxResults(3)
            ->setParameter('condo', $condominium)
            ->setParameter('user', $user)
            ->setParameter('openStatuses', IssueStatus::getOpenStatuses())
            ->getQuery()
            ->getResult();
    }

    /**
     * Gets all issues by filter status.
     *
     * @param Condominium $condominium
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function filterIssueByStatus(Condominium $condominium, $issueStatus)
    {
        $result = $this->createQueryBuilder('issue')
            ->join('issue.unit', 'unit')
            ->where('unit.condominium = :condo')
            ->setParameter('condo', $condominium);
        $result = $this->findIssueByStatus($issueStatus, $result);
        $result->orderBy('issue.creationDate', 'DESC');

        return $result;
    }

    private function findIssueByStatus($issueStatus, $result)
    {
        if ($issueStatus == IssueStatus::OPEN_AND_IN_PROGRESS) {
            return $result->andWhere('issue.status IN(:statuses)')
                ->setParameter(
                    'statuses',
                    [
                        IssueStatus::OPEN,
                        IssueStatus::IN_PROGRESS,
                    ]
                );
        }

        return $result
            ->andWhere('issue.status = :status')
            ->setParameter('status', $issueStatus);
    }

    /**
     * Get all issues from creationdate to closingDate.
     *
     * @param Condominium $condominium
     * @param DateTime    $from
     * @param DateTime    $to
     *
     * @return QueryBuilder
     */
    public function findAllIssueByFromCreationDateToClosingDate(
        Condominium $condominium,
        DateTime $from,
        DateTime $to
    ) {
        return $this->createQueryBuilder('issue')
            ->join('issue.unit', 'unit')
            ->where('unit.condominium = :condo')
            ->andWhere('issue.creationDate >= :from AND issue.creationDate <= :to')
            ->orWhere('issue.closingDate >= :from AND issue.closingDate <= :to')
            ->orWhere('issue.creationDate <= :from AND issue.closingDate >= :to')
            ->setParameter('condo', $condominium)
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->orderBy('issue.creationDate', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Get all issues different closed.
     *
     * @param $startDate
     *
     * @return QueryBuilder
     */
    public function getCountBegin(
        Datetime $startDate
    ) {
        return $this->createQueryBuilder('issue')
            ->select('COUNT(issue.id) as begin')
            ->where('issue.creationDate < :startDate')
            ->andWhere('issue.status !=  :closed')
            ->setParameter('startDate', $startDate)
            ->setParameter('closed', self::CLOSED)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get number of issues for giving supplier.
     *
     * @param Supplier $supplier
     *
     * @return QueryBuilder
     */
    public function getCountIssuesForSupplier(
        Supplier $supplier
    ) {
        return $this->createQueryBuilder('issue')
            ->select('COUNT(issue.id) as total')
            ->where('issue.supplier = :supplier')
            ->setParameter('supplier', $supplier)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Get a specific unit from issue for given unit.
     *
     * @param Unit $unit
     *
     * @return array
     */
    public function findUnitIssueByUnit(Unit $unit)
    {
        return $this->createQueryBuilder('issue')
            ->where('issue.unit = :unit')
            ->setParameter('unit', $unit)
            ->getQuery()
            ->getResult();
    }
}
