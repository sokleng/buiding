<?php

namespace CondoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CondoBundle\Entity\Condominium;
use CondoBundle\Entity\ClientUnit;
use CondoBundle\Constant\InvoiceStatus;
use DateTime;

/**
 * IncomeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncomeRepository extends EntityRepository
{
    /**
     * Gets income invoice for a given condominium, status and date.
     *
     * @param Condominium $condominium
     * @param $status
     * @param $incomeCategory
     * @param $startDate
     * @param $endDate
     *
     * @return QueryBuilder
     */
    public function findIncomeByCondominiumStatusCategoryAndDate(
        Condominium $condominium,
        $status,
        $incomeCategory,
        $startDate,
        $endDate,
        $clientUnit = null
    ) {
        $result = $this->createQueryBuilder('income')
            ->where('income.condominium = :condominium')
            ->setParameter('condominium', $condominium);

        if (!empty($status) && $status !== InvoiceStatus::ALL) {
            $result
                ->andWhere('income.status = :status')
                ->setParameter('status', $status);
        }

        if (!empty($incomeCategory)) {
            $result
                ->andWhere('income.incomeCategory = :incomeCategory')
                ->setParameter('incomeCategory', $incomeCategory);
        }

        if (!empty($startDate)) {
            $result
                ->andWhere('income.creationDate >= :startDate')
                ->setParameter('startDate', new DateTime($startDate));
        }

        if (!empty($endDate)) {
            $result
                ->andWhere('income.creationDate <= :endDate')
                ->setParameter('endDate', new DateTime($endDate));
        }
        if (!empty($clientUnit)) {
            $result
                ->andWhere('income.client = :client')
                ->setParameter('client', $clientUnit);
        }
        $result->orderBy('income.id', 'DESC');

        return $result;
    }

    /**
     * Gets income invoices for a given condominium type and date.
     *
     * @param Condominium $condominium
     * @param string      $type
     * @param DateTime    $from
     * @param DateTime    $to
     *
     * @return QueryBuilder
     */
    public function findIncomeByCondominiumAndDate(
        Condominium $condominium,
        $type,
        DateTime $from,
        DateTime $to
    ) {
        $result = $this->createQueryBuilder('income')
            ->where('income.condominium = :condominium');
        if ($type === 'creation') {
            $result
                ->andWhere('income.creationDate >= :from')
                ->andWhere('income.creationDate <= :to');
        }
        if ($type === 'paid') {
            $result
                ->andWhere('income.status = :status')
                ->andWhere('income.paymentDate >= :from')
                ->andWhere('income.paymentDate <= :to')
                ->setParameter('status', InvoiceStatus::PAID);
        }
        $result
            ->setParameter('condominium', $condominium)
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->orderBy('income.creationDate', 'ASC');

        return $result;
    }

    /**
     * Gets all invoice for a given condominium and client.
     *
     * @param Condominium $condominium
     * @param ClientUnit  $clientUnit
     *
     * @return QueryBuilder
     */
    public function findInvoiceByClientAndCondo(
        ClientUnit $clientUnit,
        Condominium $condominium
    ) {
        return $this->createQueryBuilder('income')
            ->where('income.condominium = :condominium')
            ->andWhere('income.client = :client')
            ->setParameter('condominium', $condominium)
            ->setParameter('client', $clientUnit)
            ->orderBy('income.id', 'DESC');
    }

    /**
     * Gets Unpaid Grant Total from each client.
     *
     * @param Condominium $condominium
     * @param ClientUnit  $clientUnit
     *
     * @return QueryBuilder
     */
    public function findUnpaidByCondoAndClient(
        Condominium $condominium,
        ClientUnit $clientUnit
    ) {
        return $this->createQueryBuilder('income')
            ->where('income.condominium = :condominium')
            ->andWhere('income.client = :client')
            ->andWhere('income.status = :status')
            ->setParameter('condominium', $condominium)
            ->setParameter('client', $clientUnit)
            ->setParameter('status', InvoiceStatus::UNPAID)
            ->select('SUM(income.usdAmount) AS amount')
            ->groupBy('income.client')
            ->getQuery()
            ->getResult();
    }

    /**
     * Gets income last three month for a given condominium.
     *
     * @param Condominium $condominium
     * @param Date    $date
     *
     * @return QueryBuilder
     */
    public function findAllIncomeLastThreeMonthCondominiumAndDate(
        Condominium $condominium,
        DateTime $defaultFromDate
    ) {
        $defaultFromDate = $defaultFromDate->format('Y-m').'-01 00:00:00';
        return $result = $this->createQueryBuilder('income')
            ->where('income.condominium = :condominium')
            ->andWhere('income.creationDate >= :defaultFromDate')
            ->andWhere('income.status = :status')
            ->setParameter('status', InvoiceStatus::PAID)
            ->setParameter('condominium', $condominium)
            ->setParameter('defaultFromDate', $defaultFromDate);

    }
}
