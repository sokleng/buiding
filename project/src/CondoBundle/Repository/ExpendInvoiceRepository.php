<?php

namespace CondoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use CondoBundle\Entity\Condominium;
use CondoBundle\Constant\InvoiceStatus;
use Datetime;

/**
 * ExpendInvoiceRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExpendInvoiceRepository extends EntityRepository
{
    /**
     * Get all Expend invoice by condominium.
     *
     * @param Condominium $condominium
     *
     * @return QueryBuilder
     */
    public function findAllExpendInvoiceByCondominium(Condominium $condominium)
    {
        return $this->createQueryBuilder('expend')
            ->where('expend.condominium = :condominium')
            ->setParameter('condominium', $condominium);
    }

    /**
     * Gets Expend invoice for a given condominium, status and date.
     *
     * @param Condominium $condominium
     * @param int         $status
     * @param $expendCategory
     * @param Datetime $startDate
     * @param Datetime $endDate
     *
     * @return QueryBuilder
     */
    public function findExpendByCondominiumStatusCategoryAndDate(
        Condominium $condominium,
        $status,
        $expendCategory,
        $startDate,
        $endDate
    ) {
        $result = $this->createQueryBuilder('expend')
            ->where('expend.condominium = :condominium')
            ->setParameter('condominium', $condominium);

        if ($status !== InvoiceStatus::ALL && !empty($status)) {
            $result
                ->andWhere('expend.status = :status')
                ->setParameter('status', $status);
        }

        if (!empty($expendCategory)) {
            $result
                ->andWhere('expend.expendCategory = :expendCategory')
                ->setParameter('expendCategory', $expendCategory);
        }

        if (!empty($startDate)) {
            $result
                ->andWhere('expend.creationDate >= :startDate')
                ->setParameter('startDate', new DateTime($startDate));
        }

        if (!empty($endDate)) {
            $result
                ->andWhere('expend.creationDate <= :endDate')
                ->setParameter('endDate', new DateTime($endDate));
        }
        $result->orderBy('expend.id', 'DESC');

        return $result;
    }

    /**
     * Get all expend specific condominium and date.
     *
     * @param Condominium $condominium
     * @param string      $type
     * @param DateTime    $from
     * @param DateTime    $to
     *
     * @return QueryBuilder
     */
    public function findAllExpendCondominiumAndDate(
        Condominium $condominium,
        $type,
        DateTime $from,
        DateTime $to
    ) {
        $result = $this->createQueryBuilder('expend')
            ->where('expend.condominium = :condominium');
        if ($type === 'creation') {
            $result
                ->andWhere('expend.creationDate >= :from')
                ->andWhere('expend.creationDate <= :to');
        }
        if ($type === 'paid') {
            $result
                ->andWhere('expend.status = :status')
                ->andWhere('expend.paymentDate >= :from')
                ->andWhere('expend.paymentDate <= :to')
                ->setParameter('status', InvoiceStatus::PAID);
        }
        $result
            ->setParameter('condominium', $condominium)
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->orderBy('expend.creationDate', 'ASC');

        return $result;
    }

    /**
     * Gets Expense last three month for a given condominium.
     *
     * @param Condominium $condominium
     * @param Date    $date
     *
     * @return QueryBuilder
     */
    public function findAllExpenseLastThreeMonthCondominiumAndDate(
        Condominium $condominium,
        DateTime $defaultFromDate
    ) {
        $defaultFromDate = $defaultFromDate->format('Y-m').'-01 00:00:00';
        return $result = $this->createQueryBuilder('expend')
            ->where('expend.condominium = :condominium')
            ->andWhere('expend.status = :status')
            ->andWhere('expend.creationDate >= :defaultFromDate')
            ->setParameter('status', InvoiceStatus::PAID)
            ->setParameter('condominium', $condominium)
            ->setParameter('defaultFromDate', $defaultFromDate);
    }
}
